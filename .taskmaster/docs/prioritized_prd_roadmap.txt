# 语音识别服务优化 PRD 路线图 — 按优先级排序

## 📋 项目现状分析

基于对当前代码库的全面审计，项目已具备：
- ✅ 完整的语音识别服务框架 (FastAPI + Sherpa-ONNX)
- ✅ 声纹识别和管理功能
- ✅ WebSocket 实时流处理
- ✅ PostgreSQL + pgvector 存储
- ✅ 新增的优化模块 (VAD, BatchProcessor, 存储服务等)

## 🎯 优先级分类标准

**P0 (关键)**: 影响核心功能，必须立即完成
**P1 (重要)**: 影响性能和用户体验，需要尽快完成  
**P2 (有用)**: 提升可维护性和扩展性，可延后
**P3 (可选)**: 锦上添花的功能，根据资源情况

---

## 🔥 P0 优先级 — 关键功能补齐

### P0.1 MinIO 存储服务完善
**预计时间**: 2-3天  
**负责模块**: `app/services/storage.py`

#### 当前状态
- ✅ MinIO 客户端封装已完成 (610行代码)
- ✅ 基础 CRUD 操作已实现
- ⚠️ 需要与现有 API 集成和测试

#### 实施内容
```python
# 1. 音频文件上传下载 API 集成
# 2. 文件元数据管理
# 3. 自动清理和版本管理
# 4. 错误处理和重试机制
```

#### 验收标准
- [ ] 音频文件可通过 API 上传到 MinIO
- [ ] 支持文件下载和删除操作
- [ ] 文件元数据正确存储在数据库
- [ ] 错误情况下的降级处理

### P0.2 批次处理架构优化
**预计时间**: 3-4天  
**负责模块**: `app/core/batch_processor.py`

#### 当前状态  
- ✅ BatchProcessor 类已完成 (656行代码)
- ✅ 基于 demo 的架构设计
- ⚠️ 需要与现有识别流程集成

#### 实施内容
```python
# 1. 两阶段并行处理优化
# 阶段1: 批次级 ASR 并行 (Sherpa-ONNX 内部)
# 阶段2: 后处理并行 (标点 + 声纹识别)

# 2. 性能配置优化
MAX_BATCH_THREADS = 4           # 批次级并行
PUNCTUATION_THREADS_PER_BATCH = 2  # 标点处理线程
SPEAKER_THREADS_PER_BATCH = 2      # 声纹识别线程
```

#### 验收标准
- [ ] 批量音频处理性能提升 30-50%
- [ ] ASR 和后处理解耦，可独立优化
- [ ] 支持配置化的并行度控制
- [ ] 错误处理和部分失败恢复

---

## ⚡ P1 优先级 — 性能优化

### P1.1 VAD 模块统一重构
**预计时间**: 2-3天  
**负责模块**: `app/core/vad.py`

#### 当前状态
- ✅ VADProcessor 类已完成 (493行代码)
- ✅ 统一的 VAD 处理接口
- ⚠️ 需要替换现有代码中的 VAD 调用

#### 实施内容
```python
# 1. 统一 VAD 入口点
# 替换所有直接的 sherpa_onnx VAD 调用
# 改为使用 VADProcessor 统一接口

# 2. 配置化 VAD 参数
VAD_MODEL_PATH = "models/vad/silero_vad.onnx"
VAD_SAMPLE_RATE = 16000
VAD_FRAME_LENGTH = 512
VAD_THRESHOLD = 0.5
```

#### 验收标准
- [ ] 所有 VAD 调用统一通过 VADProcessor
- [ ] VAD 参数可通过配置文件调整
- [ ] VAD 性能统一优化
- [ ] 支持不同场景的 VAD 配置

### P1.2 会话管理 API 完善
**预计时间**: 2-3天  
**负责模块**: `app/api/sessions.py` (新建)

#### 实施内容
```python
# 1. 会话管理 API 设计
POST   /api/v1/sessions          # 创建会话
GET    /api/v1/sessions          # 查询会话列表
GET    /api/v1/sessions/{id}     # 获取会话详情
DELETE /api/v1/sessions/{id}     # 删除会话
PUT    /api/v1/sessions/{id}     # 更新会话

# 2. 会话状态管理
# - 音频文件关联
# - 识别结果关联  
# - 声纹识别结果关联
```

#### 验收标准
- [ ] 完整的会话 CRUD 操作
- [ ] 会话与音频文件的关联管理
- [ ] 会话状态追踪和统计
- [ ] API 文档和测试用例

---

## 🔧 P2 优先级 — 架构优化

### P2.1 WebSocket 连接管理优化
**预计时间**: 1-2天  
**负责模块**: `app/core/websocket_manager.py`

#### 当前状态
- ✅ WebSocketManager 已部分实现
- ⚠️ 需要完善连接池和监控

#### 实施内容
```python
# 1. 连接池管理优化
# 2. 连接状态监控和自动清理
# 3. 断线重连机制
# 4. 连接数限制和负载均衡
```

### P2.2 监控和日志系统完善
**预计时间**: 2-3天  
**负责模块**: `app/utils/metrics.py`, `app/utils/logging_config.py`

#### 实施内容
```python
# 1. Prometheus 指标完善
# - 请求延迟分布
# - 错误率统计
# - 资源使用监控

# 2. 结构化日志
# - 请求链路追踪
# - 性能指标记录
# - 错误详情记录
```

### P2.3 API 接口规范化
**预计时间**: 1-2天

#### 实施内容
```python
# 1. 统一错误处理
# 2. 统一响应格式
# 3. 请求参数验证增强
# 4. API 版本管理
```

---

## 🎨 P3 优先级 — 增强功能

### P3.1 音频格式支持扩展
**预计时间**: 1-2天

#### 实施内容
```python
# 1. 更多音频格式支持
# 2. 音频质量自动优化
# 3. 音频格式转换服务
```

### P3.2 多语言支持增强
**预计时间**: 2-3天

#### 实施内容
```python
# 1. 语言自动检测
# 2. 多语言混合识别
# 3. 语言相关的后处理优化
```

### P3.3 缓存系统集成
**预计时间**: 2-3天

#### 实施内容
```python
# 1. Redis 缓存集成
# 2. 识别结果缓存
# 3. 声纹特征缓存
# 4. 模型推理结果缓存
```

---

## 📅 实施时间表

### 第一阶段 (第1-2周): P0 关键功能
```
Week 1:
- Day 1-3: MinIO 存储服务完善
- Day 4-7: 批次处理架构优化

Week 2: 
- 集成测试和问题修复
- 性能基准测试
```

### 第二阶段 (第3-4周): P1 性能优化  
```
Week 3:
- Day 1-3: VAD 模块统一重构
- Day 4-7: 会话管理 API 完善

Week 4:
- 性能测试和优化
- 用户体验改进
```

### 第三阶段 (第5-6周): P2 架构优化
```
Week 5:
- WebSocket 连接管理优化
- 监控和日志系统完善

Week 6:
- API 接口规范化
- 文档完善
```

### 第四阶段 (第7-8周): P3 增强功能
```
根据项目进度和资源情况，选择性实施 P3 功能
```

---

## 🎯 关键里程碑

### Milestone 1: 核心功能完善 (2周后)
- ✅ MinIO 存储完全可用
- ✅ 批次处理性能提升 30%+
- ✅ 所有 P0 功能交付

### Milestone 2: 性能优化完成 (4周后)  
- ✅ VAD 模块统一，性能优化
- ✅ 会话管理功能完整
- ✅ 系统整体性能提升 50%+

### Milestone 3: 架构成熟 (6周后)
- ✅ 监控和日志完善
- ✅ API 接口标准化
- ✅ 系统可维护性大幅提升

---

## 📊 成功指标

### 性能指标
- **批量处理速度**: 提升 30-50%
- **实时处理延迟**: < 100ms
- **系统吞吐量**: 提升 2-3倍
- **错误率**: < 0.1%

### 质量指标  
- **代码覆盖率**: > 80%
- **API 响应时间**: 95分位 < 200ms
- **系统可用性**: > 99.9%
- **文档完整性**: 100%

---

## 🔧 技术债务处理

在实施过程中，同步处理以下技术债务：

1. **代码规范统一**: 确保所有新代码符合项目规范
2. **测试用例补全**: 为新功能编写完整测试
3. **文档更新**: 及时更新 API 文档和部署文档
4. **性能基准**: 建立性能基准测试套件

---

## 📝 总结

这个 PRD 路线图按照 **关键 → 重要 → 有用 → 可选** 的优先级顺序，确保:

1. **P0 任务**立即解决影响核心功能的问题
2. **P1 任务**提升系统性能和用户体验
3. **P2 任务**改善架构质量和可维护性
4. **P3 任务**增加锦上添花的功能

建议严格按照优先级执行，确保每个阶段的质量，为语音识别服务构建坚实的技术基础。

